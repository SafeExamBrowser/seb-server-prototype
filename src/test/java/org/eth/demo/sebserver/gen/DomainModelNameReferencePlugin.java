/*
 * Copyright (c) 2018 ETH ZÃ¼rich, Educational Development and Technology (LET)
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

package org.eth.demo.sebserver.gen;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.mybatis.generator.api.GeneratedJavaFile;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.InnerInterface;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.config.PropertyRegistry;

public class DomainModelNameReferencePlugin extends PluginAdapter {

    private static final String DOMAIN_INTERFACE = "DOMAIN_INTERFACE";

    @Override
    public boolean validate(final List<String> warnings) {
        return true;
    }

    @Override
    public List<GeneratedJavaFile> contextGenerateAdditionalJavaFiles(
            final IntrospectedTable introspectedTable) {

        final List<GeneratedJavaFile> result = new ArrayList<>();
        if (!this.properties.containsKey(DOMAIN_INTERFACE)) {
            createDomainInterface(result);
        }

        final Interface domain = (Interface) this.properties.get(DOMAIN_INTERFACE);

        final String typeName = toTypeName(introspectedTable.getFullyQualifiedTableNameAtRuntime());
        final InnerInterface innerInterface = new InnerInterface(new FullyQualifiedJavaType(typeName));

        final Field field = new Field(
                "ENITIY_NAME",
                FullyQualifiedJavaType.getStringInstance());
        field.setInitializationString("\"" + typeName + "\"");
        innerInterface.addField(field);

        domain.addInnerInterfaces(innerInterface);

        return result;
    }

    private String toTypeName(final String tableName) {
        final String[] split = StringUtils.split(tableName, "_");
        final StringBuilder builder = new StringBuilder();
        if (split != null) {
            for (final String s : split) {
                final char[] charArray = s.toCharArray();
                charArray[0] = Character.toUpperCase(charArray[0]);
                builder.append(charArray);
            }
        }
        return builder.toString();
    }

    private void createDomainInterface(final List<GeneratedJavaFile> result) {
        final String targetProject = this.context
                .getJavaClientGeneratorConfiguration()
                .getTargetProject();

        final Interface domain = new Interface("org.eth.demo.gendomain.Domain");
        domain.addImportedType(new FullyQualifiedJavaType("javax.annotation.Generated"));
        domain.addAnnotation(
                "@Generated(value=\"org.mybatis.generator.api.MyBatisGenerator\","
                        + "comments=\"org.eth.demo.sebserver.gen.DomainModelNameReferencePlugin\","
                        + "date=\"" + DateTime.now().toString() + "\")");
        domain.addJavaDocLine("/** Defines the global names of the domain model and domain model fields.");
        domain.addJavaDocLine(
                "* This shall be used as a static overall domain model names reference within SEB Server Web-Service as well as within the integrated GUI");
        domain.addJavaDocLine(
                "* This file is generated by the org.eth.demo.sebserver.gen.DomainModelNameReferencePlugin and must not be edited manually.**/");

        final GeneratedJavaFile javaFile = new GeneratedJavaFile(
                domain,
                targetProject,
                this.context.getProperty(PropertyRegistry.CONTEXT_JAVA_FILE_ENCODING),
                this.context.getJavaFormatter());

        this.properties.put(DOMAIN_INTERFACE, domain);
        result.add(javaFile);
    }

}
